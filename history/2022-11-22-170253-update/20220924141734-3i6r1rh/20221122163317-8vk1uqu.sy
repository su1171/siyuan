{
	"ID": "20221122163317-8vk1uqu",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221122163317-8vk1uqu",
		"title": "面试题",
		"updated": "20221122170234"
	},
	"Children": [
		{
			"ID": "20221122163348-b4nyp6j",
			"Type": "NodeSuperBlock",
			"Properties": {
				"id": "20221122163348-b4nyp6j",
				"updated": "20221122170234"
			},
			"Children": [
				{
					"Type": "NodeSuperBlockOpenMarker"
				},
				{
					"Type": "NodeSuperBlockLayoutMarker",
					"Data": "row"
				},
				{
					"ID": "20221122163325-szbs97c",
					"Type": "NodeHeading",
					"HeadingLevel": 1,
					"Properties": {
						"id": "20221122163325-szbs97c",
						"updated": "20221122163348"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "nginx"
						}
					]
				},
				{
					"ID": "20221122163414-v9v81zp",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221122163414-v9v81zp",
						"updated": "20221122170234"
					},
					"Children": [
						{
							"ID": "20221122163414-z93udm1",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-z93udm1",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-lw8lfrn",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-lw8lfrn",
										"updated": "20221122163559"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么是Nginx？"
										}
									]
								},
								{
									"ID": "20221122163741-2j3c29m",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122163741-2j3c29m",
										"updated": "20221122163758"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx是一个 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "轻量级/高性能"
										},
										{
											"Type": "NodeText",
											"Data": "的"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "反向代理"
										},
										{
											"Type": "NodeText",
											"Data": "Web服务器，用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。他实现非常高效的反向代理、负载平衡，他可以处理2-3万并发连接数，官方监测能支持5万并发，现在中国使用nginx网站用户有很多，例如：新浪、网易、 腾讯等。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-cyo8jx7",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-cyo8jx7",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-60kwvxd",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-60kwvxd",
										"updated": "20221122163634"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx 有哪些优点？"
										}
									]
								},
								{
									"ID": "20221122163809-s7f4m7j",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122163809-s7f4m7j",
										"updated": "20221122163809"
									},
									"Children": [
										{
											"ID": "20221122163809-2iybqy3",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-2iybqy3",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-5vs4b1s",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-5vs4b1s",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "跨平台、配置简单。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163809-514dkf6",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-514dkf6",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-9mvls3y",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-9mvls3y",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "非阻塞、高并发连接：处理 2-3 万并发连接数，官方监测能支持 5 万并发。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163809-72hrktw",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-72hrktw",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-db0u7dk",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-db0u7dk",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "内存消耗小：开启 10 个 Nginx 才占 150M 内存。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163809-7ssx743",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-7ssx743",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-hzzsivg",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-hzzsivg",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "成本低廉，且开源。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163809-w1kdtgv",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-w1kdtgv",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-8vrm8o6",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-8vrm8o6",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "稳定性高，宕机的概率非常小。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163809-upzymsr",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163809-upzymsr",
												"updated": "20221122163809"
											},
											"Children": [
												{
													"ID": "20221122163809-sb3wy28",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163809-sb3wy28",
														"updated": "20221122163809"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-13qchca",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-13qchca",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-zmrf8p9",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-zmrf8p9",
										"updated": "20221122163637"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx应用场景？"
										}
									]
								},
								{
									"ID": "20221122163850-3lcyahw",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122163850-3lcyahw",
										"updated": "20221122163850"
									},
									"Children": [
										{
											"ID": "20221122163850-cjcwyg9",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163850-cjcwyg9",
												"updated": "20221122163850"
											},
											"Children": [
												{
													"ID": "20221122163850-dddndq8",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163850-dddndq8",
														"updated": "20221122163850"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163850-c3fvhoq",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163850-c3fvhoq",
												"updated": "20221122163850"
											},
											"Children": [
												{
													"ID": "20221122163850-5vd09wi",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163850-5vd09wi",
														"updated": "20221122163850"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "虚拟主机。可以实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟机。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163850-wmsuv23",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163850-wmsuv23",
												"updated": "20221122163850"
											},
											"Children": [
												{
													"ID": "20221122163850-t5ak7l3",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163850-t5ak7l3",
														"updated": "20221122163850"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会应为某台服务器负载高宕机而某台服务器闲置的情况。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122163850-cjhqqpl",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122163850-cjhqqpl",
												"updated": "20221122163850"
											},
											"Children": [
												{
													"ID": "20221122163850-mq0d2vb",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122163850-mq0d2vb",
														"updated": "20221122163850"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "nginz 中也可以配置安全管理、比如可以使用Nginx搭建API接口网关,对每个接口服务进行拦截。"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-qcx02hn",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-qcx02hn",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-iq2xe2d",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-iq2xe2d",
										"updated": "20221122163646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx怎么处理请求的？"
										}
									]
								},
								{
									"ID": "20221122163852-3bgeitx",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122163852-3bgeitx",
										"updated": "20221122163935"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "dG9tbA=="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "server {         \t\t\t# 第一个Server区块开始，表示一个独立的虚拟主机站点\n   listen       80；\t\t\t # 提供服务的端口，默认80\n   server_name  localhost;\t\t # 提供服务的域名主机名\n   location / { \t\t\t# 第一个location区块开始\n     root   html; \t\t\t# 站点的根目录，相当于Nginx的安装目录\n     index  index.html index.html;  \t# 默认的首页文件，多个用空格分开\n} \t\t\t\t\t# 第一个location区块结果\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122164037-fa8bfot",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122164037-fa8bfot",
										"updated": "20221122164037"
									},
									"Children": [
										{
											"ID": "20221122164037-94v3ouo",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122164037-94v3ouo",
												"updated": "20221122164037"
											},
											"Children": [
												{
													"ID": "20221122164037-il5fu55",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122164037-il5fu55",
														"updated": "20221122164037"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "首先，Nginx 在启动时，会解析配置文件，得到需要监听的端口与 IP 地址，然后在 Nginx 的 Master 进程里面先初始化好这个监控的Socket(创建 S ocket，设置 addr、reuse 等选项，绑定到指定的 ip 地址端口，再 listen 监听)。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122164037-pn43b4i",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122164037-pn43b4i",
												"updated": "20221122164037"
											},
											"Children": [
												{
													"ID": "20221122164037-0sp4jv5",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122164037-0sp4jv5",
														"updated": "20221122164037"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "然后，再 fork(一个现有进程可以调用 fork 函数创建一个新进程。由 fork 创建的新进程被称为子进程 )出多个子进程出来。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122164037-ldw7e79",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122164037-ldw7e79",
												"updated": "20221122164037"
											},
											"Children": [
												{
													"ID": "20221122164037-89o1l8s",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122164037-89o1l8s",
														"updated": "20221122164037"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "之后，子进程会竞争 accept 新的连接。此时，客户端就可以向 nginx 发起连接了。当客户端与nginx进行三次握手，与 nginx 建立好一个连接后。此时，某一个子进程会 accept 成功，得到这个建立好的连接的 Socket ，然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122164037-2dac8n1",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122164037-2dac8n1",
												"updated": "20221122164037"
											},
											"Children": [
												{
													"ID": "20221122164037-wab8z0k",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122164037-wab8z0k",
														"updated": "20221122164037"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "接着，设置读写事件处理函数，并添加读写事件来与客户端进行数据的交换。"
														}
													]
												}
											]
										},
										{
											"ID": "20221122164037-ofqzv2h",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122164037-ofqzv2h",
												"updated": "20221122164037"
											},
											"Children": [
												{
													"ID": "20221122164037-xj48lbn",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122164037-xj48lbn",
														"updated": "20221122164037"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "最后，Nginx 或客户端来主动关掉连接，到此，一个连接就寿终正寝了。"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-uuit4yw",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-uuit4yw",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-jwsx4xf",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-jwsx4xf",
										"updated": "20221122163647"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx 是如何实现高并发的？"
										}
									]
								},
								{
									"ID": "20221122164243-rc57xio",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-rc57xio",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如果一个 server 采用一个进程(或者线程)负责一个request的方式，那么进程数就是并发数。那么显而易见的，就是会有很多进程在等待中。等什么？最多的应该是等待网络传输。"
										}
									]
								},
								{
									"ID": "20221122164243-jcmhg16",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-jcmhg16",
										"updated": "20221122164302"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "而 Nginx 的"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "异步非阻塞工作方式"
										},
										{
											"Type": "NodeText",
											"Data": "正是利用了这点等待的时间。在需要等待的时候，这些进程就空闲出来待命了。因此表现为少数几个进程就解决了大量的并发问题。"
										}
									]
								},
								{
									"ID": "20221122164243-hltj839",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-hltj839",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx是如何利用的呢，简单来说：同样的 4 个进程，如果采用一个进程负责一个 request 的方式，那么，同时进来 4 个 request 之后，每个进程就负责其中一个，直至会话关闭。期间，如果有第 5 个request进来了。就无法及时反应了，因为 4 个进程都没干完活呢，因此，一般有个调度进程，每当新进来了一个 request ，就新开个进程来处理。"
										}
									]
								},
								{
									"ID": "20221122164243-noxwer7",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-noxwer7",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "回想下，BIO 是不是存在酱紫的问题？"
										}
									]
								},
								{
									"ID": "20221122164243-j5yalr9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-j5yalr9",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx 不这样，每进来一个 request ，会有一个 worker 进程去处理。但不是全程的处理，处理到什么程度呢？处理到可能发生阻塞的地方，比如向上游（后端）服务器转发 request ，并等待请求返回。那么，这个处理的 worker 不会这么傻等着，他会在发送完请求后，注册一个事件：“如果 upstream 返回了，告诉我一声，我再接着干”。于是他就休息去了。此时，如果再有 request 进来，他就可以很快再按这种方式处理。而一旦上游服务器返回了，就会触发这个事件，worker 才会来接手，这个 request 才会接着往下走。"
										}
									]
								},
								{
									"ID": "20221122164243-ql9rr53",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-ql9rr53",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "这就是为什么说，Nginx 基于事件模型。"
										}
									]
								},
								{
									"ID": "20221122164243-ma9cdul",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-ma9cdul",
										"updated": "20221122164243"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "由于 web server 的工作性质决定了每个 request 的大部份生命都是在网络传输中，实际上花费在 server 机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即："
										}
									]
								},
								{
									"ID": "20221122164243-ee9lnw0",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-ee9lnw0",
										"updated": "20221122164427"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "webserver 刚好属于网络 IO 密集型应用，不算是计算密集型"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								},
								{
									"ID": "20221122164243-4goybjh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164243-4goybjh",
										"updated": "20221122164431"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "异步，非阻塞，使用 epoll ，和大量细节处的优化。也正是 Nginx 之所以然的技术基石"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-dhtdx66",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-dhtdx66",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-6vzc9tp",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-6vzc9tp",
										"updated": "20221122163649"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么是正向代理？"
										}
									]
								},
								{
									"ID": "20221122164439-r63lecw",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164439-r63lecw",
										"updated": "20221122164538"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "向代理"
										},
										{
											"Type": "NodeText",
											"Data": "发送一个请求并指定目标(原始服务器)，然后"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "代理向原始服务器转交请求"
										},
										{
											"Type": "NodeText",
											"Data": "并将获得的内容"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "返回给客户端"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								},
								{
									"ID": "20221122164439-w8djgh1",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164439-w8djgh1",
										"updated": "20221122164545"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "客户端才能使用正向代理。正向代理总结就一句话："
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "代理端代理的是客户端"
										},
										{
											"Type": "NodeText",
											"Data": "。例如说：我们使用的OpenVPN 等等。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-ndjx8hq",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-ndjx8hq",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-c5071rs",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-c5071rs",
										"updated": "20221122163650"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么是反向代理？"
										}
									]
								},
								{
									"ID": "20221122164554-yg4ywh6",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164554-yg4ywh6",
										"updated": "20221122164554"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "反向代理（Reverse Proxy）方式，是指以代理服务器来接受 Internet上的连接请求，然后将请求，发给内部网络上的服务器并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。"
										}
									]
								},
								{
									"ID": "20221122164554-z13fez5",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164554-z13fez5",
										"updated": "20221122164601"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "反向代理总结就一句话："
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "代理端代理的是服务端。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-pgprc5j",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-pgprc5j",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-45cawtg",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-45cawtg",
										"updated": "20221122163651"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "反向代理服务器的优点是什么?"
										}
									]
								},
								{
									"ID": "20221122164625-i3t4dc3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122164625-i3t4dc3",
										"updated": "20221122165057"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "反向代理服务器可以"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "隐藏源服务器"
										},
										{
											"Type": "NodeText",
											"Data": "的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-uum4450",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-uum4450",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-kj57qxs",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-kj57qxs",
										"updated": "20221122163656"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx目录结构有哪些？"
										}
									]
								},
								{
									"ID": "20221122165108-29of2y1",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122165108-29of2y1",
										"updated": "20221122165127"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "dG9tbA=="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "tree /usr/local/nginx\n/usr/local/nginx\n├── client_body_temp\n├── conf                             # Nginx所有配置文件的目录\n│   ├── fastcgi.conf                 # fastcgi相关参数的配置文件\n│   ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件\n│   ├── fastcgi_params               # fastcgi的参数文件\n│   ├── fastcgi_params.default     \n│   ├── koi-utf\n│   ├── koi-win\n│   ├── mime.types                   # 媒体类型\n│   ├── mime.types.default\n│   ├── nginx.conf                   # Nginx主配置文件\n│   ├── nginx.conf.default\n│   ├── scgi_params                  # scgi相关参数文件\n│   ├── scgi_params.default  \n│   ├── uwsgi_params                 # uwsgi相关参数文件\n│   ├── uwsgi_params.default\n│   └── win-utf\n├── fastcgi_temp                     # fastcgi临时数据目录\n├── html                             # Nginx默认站点目录\n│   ├── 50x.html                     # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面\n│   └── index.html                   # 默认的首页文件\n├── logs                             # Nginx日志目录\n│   ├── access.log                   # 访问日志文件\n│   ├── error.log                    # 错误日志文件\n│   └── nginx.pid                    # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件\n├── proxy_temp                       # 临时目录\n├── sbin                             # Nginx命令目录\n│   └── nginx                        # Nginx的启动命令\n├── scgi_temp                        # 临时目录\n└── uwsgi_temp                       # 临时目录\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-k4y2uo0",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-k4y2uo0",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-is3pzwg",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-is3pzwg",
										"updated": "20221122163657"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx配置文件nginx.conf有哪些属性模块?"
										}
									]
								},
								{
									"ID": "20221122165242-kyu7oty",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122165242-kyu7oty",
										"updated": "20221122165256"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "dG9tbA=="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "worker_processes  1；                                    # worker进程的数量\nevents {                                                  # 事件区块开始\n    worker_connections  1024；                            # 每个worker进程支持的最大连接数\n}                                                        # 事件区块结束\nhttp {                                                   # HTTP区块开始\n    include       mime.types；                            # Nginx支持的媒体类型库文件\n    default_type  application/octet-stream；             # 默认的媒体类型\n    sendfile        on；                                   # 开启高效传输模式\n    keepalive_timeout  65；                               # 连接超时\n    server {                                            # 第一个Server区块开始，表示一个独立的虚拟主机站点\n        listen       80；                                  # 提供服务的端口，默认80\n        server_name  localhost；                           # 提供服务的域名主机名\n        location / {                                    # 第一个location区块开始\n            root   html；                               # 站点的根目录，相当于Nginx的安装目录\n            index  index.html index.htm；                  # 默认的首页文件，多个用空格分开\n        }                                                  # 第一个location区块结果\n        error_page   500502503504  /50x.html；             # 出现对应的http状态码时，使用50x.html回应客户\n        location = /50x.html {                          # location区块开始，访问50x.html\n            root   html；                                  # 指定对应的站点目录为html\n        }\n    }  \n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-7ylv1ph",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-7ylv1ph",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-p93i148",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-p93i148",
										"updated": "20221122163702"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cookie和session区别？"
										}
									]
								},
								{
									"ID": "20221122165644-3r2114q",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122165644-3r2114q",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "共同："
										}
									]
								},
								{
									"ID": "20221122165644-973cntf",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165644-973cntf",
										"updated": "20221122165701"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "存放用户信息。存放的形式：key-value格式 变量和变量内容"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "键值对"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								},
								{
									"ID": "20221122165644-qu4mdhf",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122165644-qu4mdhf",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "区别："
										}
									]
								},
								{
									"ID": "20221122165644-ygt9gbr",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165644-ygt9gbr",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cookie"
										}
									]
								},
								{
									"ID": "20221122165644-41aut84",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122165644-41aut84",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"ID": "20221122165644-uufdam8",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-uufdam8",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-yw4i3s7",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-yw4i3s7",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "存放在客户端浏览器"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-vchnsse",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-vchnsse",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-tobpchg",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-tobpchg",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "每个域名对应一个cookie，不能跨跃域名访问其他cookie"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-b600vkk",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-b600vkk",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-ktaj46p",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-ktaj46p",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "用户可以查看或修改cookie"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-cnaqceg",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-cnaqceg",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-4tsp2s0",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-4tsp2s0",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "http响应报文里面给你浏览器设置"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-5tu4i8p",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-5tu4i8p",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-tvpg2w0",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-tvpg2w0",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "钥匙（用于打开浏览器上锁头）"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20221122165644-xwey91s",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165644-xwey91s",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "session:"
										}
									]
								},
								{
									"ID": "20221122165644-f6ts6nb",
									"Type": "NodeList",
									"ListData": {},
									"Properties": {
										"id": "20221122165644-f6ts6nb",
										"updated": "20221122165644"
									},
									"Children": [
										{
											"ID": "20221122165644-3hjoaow",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-3hjoaow",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-ymmwqfr",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-ymmwqfr",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "存放在服务器（文件，数据库，redis）"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-fnhi9ef",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-fnhi9ef",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-i97lrwu",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-i97lrwu",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "存放敏感信息"
														}
													]
												}
											]
										},
										{
											"ID": "20221122165644-rq3qvli",
											"Type": "NodeListItem",
											"ListData": {
												"BulletChar": 42,
												"Marker": "Kg=="
											},
											"Properties": {
												"id": "20221122165644-rq3qvli",
												"updated": "20221122165644"
											},
											"Children": [
												{
													"ID": "20221122165644-p9v5c6a",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20221122165644-p9v5c6a",
														"updated": "20221122165644"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "锁头"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-yqh2rjt",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-yqh2rjt",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-4nqtz80",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-4nqtz80",
										"updated": "20221122163703"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "为什么 Nginx 不使用多线程？"
										}
									]
								},
								{
									"ID": "20221122165747-pu6kaki",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165747-pu6kaki",
										"updated": "20221122165747"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "Apache:"
										},
										{
											"Type": "NodeText",
											"Data": " 创建多个进程或线程，而每个进程或线程都会为其分配 cpu 和内存（线程要比进程小的多，所以 worker 支持比 perfork 高的并发），并发过大会榨干服务器资源。"
										}
									]
								},
								{
									"ID": "20221122165747-niydvmi",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165747-niydvmi",
										"updated": "20221122165810"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "Nginx:"
										},
										{
											"Type": "NodeText",
											"Data": " 采用单线程"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "异步非阻塞"
										},
										{
											"Type": "NodeText",
											"Data": "处理请求（管理员可以配置 Nginx 主进程的工作进程的数量）(epoll)，不会为每个请求分配 cpu 和内存资源，节省了大量资源，同时也减少了大量的 CPU 的上下文切换。所以才使得 Nginx 支持更高的并发。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-om3o3ac",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-om3o3ac",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-wl4cc7p",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-wl4cc7p",
										"updated": "20221122163704"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "nginx和apache的区别"
										}
									]
								},
								{
									"ID": "20221122165900-tass4px",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165900-tass4px",
										"updated": "20221122165900"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "轻量级，同样起web服务，比apache占用更少的内存和资源。"
										}
									]
								},
								{
									"ID": "20221122165900-jg1pdjs",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165900-jg1pdjs",
										"updated": "20221122165900"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "抗并发，nginx处理请求是异步非阻塞的，而apache则是阻塞性的，在高并发下nginx能保持低资源，低消耗高性能。"
										}
									]
								},
								{
									"ID": "20221122165900-4fbe1ki",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165900-4fbe1ki",
										"updated": "20221122165900"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "高度模块化的设计，编写模块相对简单。"
										}
									]
								},
								{
									"ID": "20221122165900-m6ydzar",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165900-m6ydzar",
										"updated": "20221122165900"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "最核心的区别在于apache是同步多进程模型，一个连接对应一个进程，nginx是异步的，多个连接可以对应一个进程。"
										}
									]
								},
								{
									"ID": "20221122165902-0aeibcy",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165902-0aeibcy",
										"updated": "20221122165913"
									},
									"Children": [
										{
											"Type": "NodeImage",
											"Data": "span",
											"Properties": {
												"parent-style": "display: block; max-width: 918px;",
												"style": "width: 908px;"
											},
											"Children": [
												{
													"Type": "NodeBang"
												},
												{
													"Type": "NodeOpenBracket"
												},
												{
													"Type": "NodeLinkText",
													"Data": "image"
												},
												{
													"Type": "NodeCloseBracket"
												},
												{
													"Type": "NodeOpenParen"
												},
												{
													"Type": "NodeLinkDest",
													"Data": "assets/image-20221122165909-ng5t9yu.png"
												},
												{
													"Type": "NodeCloseParen"
												}
											]
										},
										{
											"Type": "NodeKramdownSpanIAL",
											"Data": "{: style=\"width: 908px;\" parent-style=\"display: block; max-width: 918px;\"}"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-kmu09g3",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-kmu09g3",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-6x26ofw",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-6x26ofw",
										"updated": "20221122163705"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么是动态资源、静态资源分离？"
										}
									]
								},
								{
									"ID": "20221122165929-v6hfvss",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165929-v6hfvss",
										"updated": "20221122165929"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "动态资源、静态资源分离，是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。"
										}
									]
								},
								{
									"ID": "20221122165929-jl75udl",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165929-jl75udl",
										"updated": "20221122165929"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "动态资源、静态资源分离简单的概括是：动态文件与静态文件的分离。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-vpu3a7z",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-vpu3a7z",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-4e4wc1a",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-4e4wc1a",
										"updated": "20221122163706"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "为什么要做动、静分离？"
										}
									]
								},
								{
									"ID": "20221122165954-z7wl7m8",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165954-z7wl7m8",
										"updated": "20221122170017"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do 等等），有些请求是不需要经过后台处理的（如：css、html、jpg、js 等等文件），这些"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "不需要经过后台处理的文件称为静态文件"
										},
										{
											"Type": "NodeText",
											"Data": "，"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "否则动态文件"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								},
								{
									"ID": "20221122165954-new8i28",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165954-new8i28",
										"updated": "20221122165954"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "因此我们后台处理忽略静态文件。这会有人又说那我后台忽略静态文件不就完了吗？当然这是可以的，但是这样后台的请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决动、静分离将网站静态资源（HTML，JavaScript，CSS，img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问"
										}
									]
								},
								{
									"ID": "20221122165954-8siyyr4",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165954-8siyyr4",
										"updated": "20221122165954"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "这里我们将静态资源放到 Nginx 中，动态资源转发到 Tomcat 服务器中去。"
										}
									]
								},
								{
									"ID": "20221122165954-jb47sy3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165954-jb47sy3",
										"updated": "20221122165954"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "当然，因为现在七牛、阿里云等 CDN 服务已经很成熟，主流的做法，是把静态资源缓存到 CDN 服务中，从而提升访问速度。"
										}
									]
								},
								{
									"ID": "20221122165954-9gv9rvh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122165954-9gv9rvh",
										"updated": "20221122165954"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "相比本地的 Nginx 来说，CDN 服务器由于在国内有更多的节点，可以实现用户的就近访问。并且，CDN 服务可以提供更大的带宽，不像我们自己的应用服务，提供的带宽是有限的。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-6e05cnc",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-6e05cnc",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-dw2lny3",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-dw2lny3",
										"updated": "20221122163706"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么叫 CDN 服务？"
										}
									]
								},
								{
									"ID": "20221122170048-ducfran",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170048-ducfran",
										"updated": "20221122170048"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "CDN ，即内容分发网络。"
										}
									]
								},
								{
									"ID": "20221122170048-ya2e04f",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170048-ya2e04f",
										"updated": "20221122170113"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "其目的是，通过在现有的 Internet中 增加一层新的网络架构，"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "将网站的内容发布到最接近用户的网络边缘，使用户可"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong mark",
											"TextMarkTextContent": "就近"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "取得所需的内容"
										},
										{
											"Type": "NodeText",
											"Data": "，提"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "高用户访问网站的速度。"
										}
									]
								},
								{
									"ID": "20221122170048-uftoo4o",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170048-uftoo4o",
										"updated": "20221122170048"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "一般来说，因为现在 CDN 服务比较大众，所以基本所有公司都会使用 CDN 服务。"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-4bl5ncd",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-4bl5ncd",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-i1byz8j",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-i1byz8j",
										"updated": "20221122163707"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx怎么做的动静分离？"
										}
									]
								},
								{
									"ID": "20221122170119-xze5nj7",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170119-xze5nj7",
										"updated": "20221122170216"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "只需要指定路径对应的目录。location/可以使用"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "正则表达式匹配"
										},
										{
											"Type": "NodeText",
											"Data": "。并指定对应的硬盘中的目录。如下：（操作都是在Linux上）"
										}
									]
								},
								{
									"ID": "20221122170130-aleltrj",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170130-aleltrj",
										"updated": "20221122170149"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker",
											"CodeBlockInfo": "dG9tbA=="
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "location /image/ {\n    root   /usr/local/static/;\n    autoindex on;\n}\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122170153-02w7e7d",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170153-02w7e7d"
									}
								}
							]
						},
						{
							"ID": "20221122163414-w68vi0l",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-w68vi0l",
								"updated": "20221122170234"
							},
							"Children": [
								{
									"ID": "20221122163414-hye81rk",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-hye81rk",
										"updated": "20221122163708"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx负载均衡的算法怎么实现的?策略有哪些?"
										}
									]
								},
								{
									"ID": "20221122170234-yi888yi",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-yi888yi",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "为了避免服务器崩溃，大家会通过负载均衡的方式来分担服务器压力。将对台服务器组成一个集群，当用户访问时，先访问到一个转发服务器，再由转发服务器将访问分发到压力更小的服务器。"
										}
									]
								},
								{
									"ID": "20221122170234-2ifv7zl",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-2ifv7zl",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx负载均衡实现的策略有以下五种："
										}
									]
								},
								{
									"ID": "20221122170234-almib2t",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122170234-almib2t",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "1 .轮询(默认)"
										}
									]
								},
								{
									"ID": "20221122170234-nrp1xhz",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-nrp1xhz",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某个服务器宕机，能自动剔除故障系统。"
										}
									]
								},
								{
									"ID": "20221122170234-vc6ur5v",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170234-vc6ur5v",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker"
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "upstream backserver { \n server 192.168.0.12; \n server 192.168.0.13; \n} \n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122170234-0qh6fs2",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122170234-0qh6fs2",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "2. 权重 weight"
										}
									]
								},
								{
									"ID": "20221122170234-k7eexq3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-k7eexq3",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "weight的值越大，分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。"
										}
									]
								},
								{
									"ID": "20221122170234-5myag8q",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170234-5myag8q",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker"
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "# 权重越高，在被访问的概率越大，如上例，分别是20%，80%。\nupstream backserver { \n server 192.168.0.12 weight=2; \n server 192.168.0.13 weight=8; \n} \n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122170234-617qv0b",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122170234-617qv0b",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "3. ip_hash( IP绑定)"
										}
									]
								},
								{
									"ID": "20221122170234-az7cxk8",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-az7cxk8",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的session共享问题"
										}
									]
								},
								{
									"ID": "20221122170234-9y515ju",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170234-9y515ju",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker"
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "upstream backserver { \n ip_hash; \n server 192.168.0.12:88; \n server 192.168.0.13:80; \n} \n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122170234-44pjnqx",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122170234-44pjnqx",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "4. fair(第三方插件)"
										}
									]
								},
								{
									"ID": "20221122170234-gcnb80k",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-gcnb80k",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "必须安装upstream_fair模块。"
										}
									]
								},
								{
									"ID": "20221122170234-jbcc518",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-jbcc518",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。"
										}
									]
								},
								{
									"ID": "20221122170234-negd3cv",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170234-negd3cv",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker"
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "# 哪个服务器的响应速度快，就将请求分配到那个服务器上。\nupstream backserver { \n server server1; \n server server2; \n fair; \n} \n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								},
								{
									"ID": "20221122170234-0fncrdt",
									"Type": "NodeHeading",
									"HeadingLevel": 4,
									"Properties": {
										"id": "20221122170234-0fncrdt",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "5.url_hash(第三方插件)"
										}
									]
								},
								{
									"ID": "20221122170234-nhqahhm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-nhqahhm",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "必须安装Nginx的hash软件包"
										}
									]
								},
								{
									"ID": "20221122170234-o0zubv2",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221122170234-o0zubv2",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。"
										}
									]
								},
								{
									"ID": "20221122170234-j1wr97n",
									"Type": "NodeCodeBlock",
									"IsFencedCodeBlock": true,
									"Properties": {
										"id": "20221122170234-j1wr97n",
										"updated": "20221122170234"
									},
									"Children": [
										{
											"Type": "NodeCodeBlockFenceOpenMarker",
											"Data": "```"
										},
										{
											"Type": "NodeCodeBlockFenceInfoMarker"
										},
										{
											"Type": "NodeCodeBlockCode",
											"Data": "upstream backserver { \n server squid1:3128; \n server squid2:3128; \n hash $request_uri; \n hash_method crc32; \n}\n"
										},
										{
											"Type": "NodeCodeBlockFenceCloseMarker",
											"Data": "```"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-rkqhsnr",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-rkqhsnr",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-ttx7pu7",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-ttx7pu7",
										"updated": "20221122163713"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如何用Nginx解决前端跨域问题？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-3ipsa1m",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-3ipsa1m",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-cqz1sv8",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-cqz1sv8",
										"updated": "20221122163715"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx虚拟主机怎么配置?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-qlfqzwi",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-qlfqzwi",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-kr8b88r",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-kr8b88r",
										"updated": "20221122163715"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "location的作用是什么？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-jvumj1p",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-jvumj1p",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-u1g5b80",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-u1g5b80",
										"updated": "20221122163716"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "限流怎么做的？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-t3o7alr",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-t3o7alr",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-v7hcx0j",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-v7hcx0j",
										"updated": "20221122163717"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "漏桶流算法和令牌桶算法知道？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-de9576z",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-de9576z",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-d82ppvx",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-d82ppvx",
										"updated": "20221122163718"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx配置高可用性怎么配置？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-cc2nkf7",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-cc2nkf7",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-hzs2v4o",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-hzs2v4o",
										"updated": "20221122163719"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx怎么判断别IP不可访问？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-8ewn7q2",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-8ewn7q2",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-d2vwon1",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-d2vwon1",
										"updated": "20221122163723"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "在nginx中，如何使用未定义的服务器名称来阻止处理请求？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-3lieumr",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-3lieumr",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-7tq19aa",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-7tq19aa",
										"updated": "20221122163723"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "怎么限制浏览器访问？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-uzjvduw",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-uzjvduw",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-wbzbs99",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-wbzbs99",
										"updated": "20221122163724"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Rewrite全局变量是什么？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-7mn75pr",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-7mn75pr",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-g24tkjx",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-g24tkjx",
										"updated": "20221122163725"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx 如何实现后端服务的健康检查？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-se8hdnv",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-se8hdnv",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-fbe3w9n",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-fbe3w9n",
										"updated": "20221122163726"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx 如何开启压缩？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-vl87gcf",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-vl87gcf",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-7lvqa39",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-7lvqa39",
										"updated": "20221122163727"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ngx_http_upstream_module的作用是什么?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-o9tgqfi",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-o9tgqfi",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-cfds1es",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-cfds1es",
										"updated": "20221122163729"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "什么是C10K问题?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-qka4tin",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-qka4tin",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-gmeed8e",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-gmeed8e",
										"updated": "20221122163730"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Nginx是否支持将请求压缩到上游?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-9jii4uk",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-9jii4uk",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-sz8r4yi",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-sz8r4yi",
										"updated": "20221122163734"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如何在Nginx中获得当前的时间?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-zitbadt",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-zitbadt",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-y3xdxvm",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-y3xdxvm",
										"updated": "20221122163735"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "用Nginx服务器解释-s的目的是什么?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-6m33qqz",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-6m33qqz",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-2os8vff",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-2os8vff",
										"updated": "20221122163736"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如何在Nginx服务器上添加模块?"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-yrlff08",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-yrlff08",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-z8l8210",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-z8l8210",
										"updated": "20221122163736"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "生产中如何设置worker进程的数量呢？"
										}
									]
								}
							]
						},
						{
							"ID": "20221122163414-dpsj2on",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221122163414-dpsj2on",
								"updated": "20221122163414"
							},
							"Children": [
								{
									"ID": "20221122163414-hz8nd8u",
									"Type": "NodeHeading",
									"HeadingLevel": 2,
									"Properties": {
										"id": "20221122163414-hz8nd8u",
										"updated": "20221122163737"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "nginx状态码"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeSuperBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20221122163317-emc698i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221122163317-emc698i",
				"updated": "20221122163317"
			}
		}
	]
}